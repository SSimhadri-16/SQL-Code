CREATE TABLE EMPLOYEES (
                          EMP_ID CHAR(9) NOT NULL,
                          F_NAME VARCHAR(15) NOT NULL,
                          L_NAME VARCHAR(15) NOT NULL,
                          SSN CHAR(9),
                          B_DATE DATE,
                          SEX CHAR,
                          ADDRESS VARCHAR(30),
                          JOB_ID CHAR(9),
                          SALARY DECIMAL(10,2),
                          MANAGER_ID CHAR(9),
                          DEP_ID CHAR(9) NOT NULL,
                          PRIMARY KEY (EMP_ID)
                        );

CREATE TABLE JOB_HISTORY (
                            EMPL_ID CHAR(9) NOT NULL,
                            START_DATE DATE,
                            JOBS_ID CHAR(9) NOT NULL,
                            DEPT_ID CHAR(9),
                            PRIMARY KEY (EMPL_ID,JOBS_ID)
                          );

CREATE TABLE JOBS (
                    JOB_IDENT CHAR(9) NOT NULL,
                    JOB_TITLE VARCHAR(30) ,
                    MIN_SALARY DECIMAL(10,2),
                    MAX_SALARY DECIMAL(10,2),
                    PRIMARY KEY (JOB_IDENT)
                  );

CREATE TABLE DEPARTMENTS (
                            DEPT_ID_DEP CHAR(9) NOT NULL,
                            DEP_NAME VARCHAR(15) ,
                            MANAGER_ID CHAR(9),
                            LOC_ID CHAR(9),
                            PRIMARY KEY (DEPT_ID_DEP)
                          );

CREATE TABLE LOCATIONS (
                          LOCT_ID CHAR(9) NOT NULL,
                          DEP_ID_LOC CHAR(9) NOT NULL,
                          PRIMARY KEY (LOCT_ID,DEP_ID_LOC)
                        );

Select * from Employees;


					----String Patterns----
SELECT F_NAME, L_NAME FROM Employees WHERE ADDRESS LIKE '%Elgin,IL' ;

--Retrieve all employees who were born during the 1970's
SELECT F_NAME, L_NAME FROM EMPLOYEES WHERE B_DATE LIKE '197%';

--Retrieve all employees in department 5 whose salary is between 60000 and 70000
SELECT * FROM EMPLOYEES WHERE DEP_ID=5 AND salary BETWEEN 60000 AND 70000;

					----Sorting----
SELECT F_NAME, L_NAME, DEP_ID FROM EMPLOYEES ORDER BY DEP_ID;

--Retrieve a list of employees ordered in descending order by department ID and within each department ordered alphabetically in descending order by last name
SELECT F_NAME, L_NAME, DEP_ID FROM EMPLOYEES ORDER BY DEP_ID DESC, L_NAME DESC;
SELECT F_NAME, L_NAME, DEP_ID FROM EMPLOYEES ORDER BY DEP_ID DESC, L_NAME DESC;

--Retrieve a list of employees ordered by department name, and within each department ordered alphabetically in descending order by last name
SELECT D.DEP_NAME, E.F_NAME, E.L_NAME FROM EMPLOYEES as E, DEPARTMENTS as D WHERE D.DEPT_ID_DEP = E.DEP_ID ORDER BY D.DEP_NAME, E.L_NAME DESC;

--For each department ID retrieve the number of employees in the department
SELECT DEP_ID, count(EMP_ID) as EMPLOYEE_COUNT from EMPLOYEES GROUP BY DEP_ID;

--For each department retrieve the number of employees in the department, and the average employee salary and order the result set by average salary
SELECT DEP_ID, count(EMP_ID) as EMPLOYEE_COUNT, AVG(SALARY) as AVG_SALARY from EMPLOYEES GROUP BY DEP_ID ORDER BY AVG_SALARY;

--From the above, limit the result to departments with fewer than 4 employees
SELECT DEP_ID, count(EMP_ID) as EMPLOYEE_COUNT, AVG(SALARY) as AVG_SALARY from EMPLOYEES GROUP BY DEP_ID HAVING count(*)<4 ORDER BY AVG_SALARY;


								----SUB QUERIES AND NESTED QUERIES -------
--Query to retrieve all employees records whose salary is lower than the average salary
SELECT * FROM EMPLOYEES WHERE salary < (SELECT AVG(salary) FROM EMPLOYEES);

--Query to retrieve all employees records with EMP_ID, SALARY and maximum salary as MAX_SALARY in every row
SELECT EMP_ID, SALARY, (SELECT MAX(SALARY) AS MAX_SALARY FROM EMPLOYEES) FROM EMPLOYEES;

--Query to retrieve columns excluding sensitive employee data (i.e. does not include columns: SSN, B_DATE, SEX, ADDRESS, SALARY)
SELECT * FROM (SELECT EMP_ID, F_NAME, L_NAME, DEP_ID FROM EMPLOYEES) AS EMPBASICDETAILS;


								----Multiple Tables with Subqueries----
--Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table
SELECT * from EMPLOYEES where JOB_ID IN (SELECT JOB_IDENT FROM JOBS);	

--Query to Retrieve only the list of employees whose JOB_TITLE is Jr. Designer
SELECT * from EMPLOYEES where JOB_ID IN (SELECT JOB_IDENT FROM JOBS WHERE JOB_TITLE='Jr. Designer');	

--Query to Retrieve JOB information and who earn more than $70,000
SELECT JOB_IDENT, JOB_TITLE, MIN_SALARY, MAX_SALARY FROM JOBS WHERE JOB_IDENT IN (SELECT JOB_ID FROM EMPLOYEES WHERE SALARY>70000);

--Query to Retrieve JOB information and whose birth year is after 1976
SELECT JOB_IDENT, JOB_TITLE, MIN_SALARY, MAX_SALARY FROM JOBS WHERE JOB_IDENT IN (SELECT JOB_ID FROM EMPLOYEES WHERE YEAR(B_DATE)>1976);

--Query to Retrieve JOB information for female employees whose birth year is after 1976
SELECT JOB_IDENT, JOB_TITLE, MIN_SALARY, MAX_SALARY FROM JOBS WHERE JOB_IDENT IN (SELECT JOB_ID FROM EMPLOYEES WHERE SEX='F' AND YEAR(B_DATE)>1976);

--Query to cross join EMPLOYEES and JOBS tables
SELECT * FROM EMPLOYEES, JOBS;

--Query to Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table
SELECT * FROM EMPLOYEES, JOBS WHERE EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;
SELECT * FROM EMPLOYEES, JOBS WHERE JOB_ID = JOB_IDENT;
--Using aliases
SELECT * FROM EMPLOYEES E, JOBS J WHERE E.JOB_ID = J.JOB_IDENT;		
--Retrieve only the Employee ID, Employee Name and Job Title
SELECT EMP_ID, F_NAME, L_NAME, JOB_TITLE FROM EMPLOYEES E, JOBS J WHERE E.JOB_ID = J.JOB_IDENT;
--For above query specify the fully qualified column names with aliases in the SELECT clause
SELECT E.EMP_ID, E.F_NAME, E.L_NAME, J.JOB_TITLE FROM EMPLOYEES E, JOBS J WHERE E.JOB_ID = J.JOB_IDENT
